// Write a multithreaded program that generates the Fibonacci series 
// using the pThreads library. This program should work as follows:
// Computing Fibonacci Numbers With Threads The Fibonacci sequence 
// is the series of numbers 0, 1, 1, 2, 3, 5, 8, .... Formally, it 
// can be expressed as: fib0 = 0 fib1 = 1 fibn = fibn-1 + fibn-2. The 
// user will enter on the command line the number of Fibonacci numbers 
// that the program will generate. The program will then create a separate 
// thread that will generate the Fibonacci numbers placing the sequence in 
// data that is shared by the threads (an array or vector is probably the 
// most convenient data structure). When the thread finishes execution, the 
// parent thread will output the sequence generated by the child thread. 
// Because the parent thread cannot begin outputting the Fibonacci sequence 
// until the child thread finishes, this will require having the parent 
// thread wait for the child thread to finish.

#include<iostream>
#include<pthread.h>
#include<vector>
using namespace std;
vector<int> dp(1000);
void* fib(void*num){
    long n=long(num);
    
    dp[1]=0;
    dp[2]=1;

    if(n==1 || n==2){
        pthread_exit(NULL);
    }

    for(long i=3;i<=n;i++){
        dp[i]=dp[i-1]+dp[i-2];
    }

    pthread_exit(NULL);

}
int main(){

    long n;
    cout<<"Enter n : ";
    cin>>n;

    pthread_t thread;

    int rc=pthread_create(&thread,NULL,fib,(void*)n);

    if(rc){
        cout<<"Error : "<<rc<<endl;
        exit(-1);
    }

    pthread_join(thread, NULL);

    cout<<"The fibonacci sequence is : ";
    for(long i=1;i<=n;i++){
        cout<<dp[i]<<" , ";
    }
    cout<<endl;

    pthread_exit(NULL);

    return 0;
}